/* The following code was generated by JFlex 1.4.3 on 7/12/15 12:10 AM */

package fase1;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
//import logica.*;
//import principal.*;
//import tecumhuman_p1compi2_cliente.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/12/15 12:10 AM from the specification file
 * <tt>scanner.jflex</tt>
 */
public class lexicoF1 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\16\1\0\1\67\1\5\22\0\1\67\1\45\1\15"+
    "\3\0\1\63\1\14\1\47\1\50\1\4\1\6\1\55\1\12\1\10"+
    "\1\3\12\1\1\56\1\60\1\44\1\57\1\46\1\65\1\0\1\35"+
    "\1\25\1\33\1\22\1\27\1\40\1\32\1\34\1\17\1\2\1\41"+
    "\1\26\1\42\1\20\1\23\1\37\1\2\1\31\1\30\1\21\1\24"+
    "\1\36\1\11\1\43\2\2\1\53\1\0\1\54\1\66\1\13\1\0"+
    "\1\35\1\25\1\33\1\22\1\27\1\40\1\32\1\34\1\17\1\2"+
    "\1\41\1\26\1\42\1\20\1\23\1\37\1\2\1\31\1\30\1\21"+
    "\1\24\1\36\1\7\1\43\2\2\1\51\1\64\1\52\43\0\1\62"+
    "\40\0\1\61\37\0\1\61\uff1d\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\3\1\10\1\3\1\11\2\1\16\3\1\12\1\1"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\1\1\24\2\1\1\6\1\1\1\25\5\0"+
    "\1\26\2\3\1\27\2\0\1\30\1\3\1\31\5\3"+
    "\1\32\25\3\1\0\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\3\6\2\0\1\3"+
    "\1\0\1\45\1\46\2\3\1\47\31\3\1\50\1\3"+
    "\1\0\1\6\2\0\3\3\1\51\1\52\1\53\4\3"+
    "\1\54\1\3\1\55\1\56\10\3\1\57\1\60\1\61"+
    "\6\3\1\0\2\6\1\62\1\63\5\3\1\64\1\65"+
    "\4\3\1\66\3\3\1\67\1\3\1\70\3\3\1\71"+
    "\1\0\1\62\1\3\1\72\1\73\2\3\1\74\1\3"+
    "\1\75\1\76\1\77\1\100\1\3\1\101\4\3\1\0"+
    "\3\3\1\102\1\103\1\3\1\104\3\3\1\0\1\105"+
    "\2\3\1\106\1\3\1\107\1\3\1\0\2\3\1\110"+
    "\1\3\1\0\1\3\1\111\1\3\1\0\1\112\1\113"+
    "\1\0\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\70\0\u0118\0\u0150"+
    "\0\u0188\0\70\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u0658"+
    "\0\70\0\u0690\0\u06c8\0\u0700\0\u0738\0\70\0\u0770\0\u07a8"+
    "\0\u07e0\0\u0818\0\u0850\0\u0818\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0268\0\70\0\u0968\0\250\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u0118"+
    "\0\70\0\u0770\0\u0fc0\0\u07a8\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\70\0\u1110\0\u1148\0\u1180\0\250\0\u11b8\0\u11f0"+
    "\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0"+
    "\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\250"+
    "\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8"+
    "\0\250\0\250\0\250\0\u18f0\0\u1928\0\u1960\0\u1998\0\250"+
    "\0\u19d0\0\250\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20"+
    "\0\u1b58\0\u1b90\0\u1bc8\0\250\0\250\0\250\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\70\0\70"+
    "\0\250\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\250\0\250"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\250\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\250\0\u2060\0\250\0\u2098\0\u20d0\0\u2108\0\250\0\u2140"+
    "\0\u0fc0\0\u2178\0\250\0\u21b0\0\u21e8\0\u2220\0\250\0\u2258"+
    "\0\250\0\250\0\250\0\250\0\u2290\0\250\0\u22c8\0\u2300"+
    "\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\250\0\250"+
    "\0\u2488\0\250\0\u24c0\0\u24f8\0\u2530\0\u2568\0\250\0\u25a0"+
    "\0\u25d8\0\250\0\u2610\0\250\0\u2648\0\u2680\0\u26b8\0\u26f0"+
    "\0\250\0\u2728\0\u2760\0\u2798\0\250\0\u27d0\0\u2808\0\250"+
    "\0\250\0\u2840\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\2\1\15\1\16\1\7\1\17"+
    "\1\20\1\21\1\22\1\4\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\2\4\1\32\1\33\1\34"+
    "\3\4\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\2"+
    "\1\53\1\54\1\55\1\56\1\7\71\0\1\3\6\0"+
    "\1\57\60\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\25\4\27\0\1\60\1\61\1\0\2\62"+
    "\1\63\64\0\1\7\10\0\1\7\45\0\1\7\2\0"+
    "\1\7\3\0\1\62\2\0\1\64\1\62\1\63\60\0"+
    "\2\4\1\62\2\0\1\62\1\65\1\63\1\4\1\0"+
    "\1\4\3\0\15\4\1\66\7\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\15\4\1\66"+
    "\7\4\25\0\1\3\10\0\1\67\57\0\1\70\4\0"+
    "\1\70\1\0\1\70\5\0\25\70\24\0\15\71\1\72"+
    "\1\0\51\71\1\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\1\4\1\73\17\4\1\74\1\4"+
    "\1\75\1\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\5\4\1\76\2\4\1\77\14\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\12\4\1\100\2\4\1\101\7\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\4\4"+
    "\1\102\3\4\1\103\14\4\25\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\4\1\104\23\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\4\4\1\105\5\4\1\106\12\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\4\4"+
    "\1\107\20\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\7\4\1\110\14\4\1\111\25\0"+
    "\2\4\4\0\1\112\1\0\1\112\1\0\1\4\3\0"+
    "\2\4\1\113\2\4\1\114\17\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\10\4\1\115"+
    "\14\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\4\4\1\116\2\4\1\117\5\4\1\120"+
    "\1\121\6\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\4\4\1\122\20\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\5\4"+
    "\1\123\4\4\1\124\3\4\1\125\6\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\4\4"+
    "\1\126\11\4\1\127\6\4\71\0\1\130\11\0\1\131"+
    "\67\0\1\132\67\0\1\133\56\0\1\134\10\0\1\135"+
    "\72\0\1\136\70\0\1\137\11\0\1\7\10\0\1\7"+
    "\45\0\1\140\2\0\1\7\65\0\1\141\3\0\1\142"+
    "\66\0\3\143\1\144\1\143\1\0\2\144\1\145\5\143"+
    "\1\0\51\143\4\146\1\0\63\146\3\0\1\62\2\0"+
    "\2\62\1\63\66\0\1\147\1\0\1\147\57\0\2\4"+
    "\1\62\2\0\1\62\1\65\1\63\1\4\1\0\1\4"+
    "\3\0\25\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\1\150\24\4\25\0\1\151\102\0"+
    "\1\152\54\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\2\4\1\153\22\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\20\4\1\154"+
    "\4\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\7\4\1\155\15\4\25\0\2\4\4\0"+
    "\1\156\1\0\1\156\1\0\1\4\3\0\25\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\5\4\1\157\17\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\1\160\24\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\5\4"+
    "\1\161\1\162\16\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\21\4\1\163\3\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\2\4\1\164\22\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\4\4\1\165\20\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\10\4\1\166\14\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\4\4\1\167\20\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\11\4\1\170\13\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\2\4\1\171\22\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\172\24\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\12\4\1\173\12\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\20\4"+
    "\1\174\4\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\2\4\1\175\15\4\1\176\4\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\1\4\1\177\23\4\25\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\16\4\1\200\6\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\16\4\1\201\6\4\25\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\11\4\1\202\13\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\1\203\24\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\6\4\1\204\16\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\205\3\4\1\206\20\4\25\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\12\4\1\207\12\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\12\4\1\210\12\4\25\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\7\4\1\211\15\4"+
    "\47\0\1\212\44\0\5\143\1\0\10\143\1\0\56\143"+
    "\1\0\1\143\1\213\1\143\1\213\4\143\1\0\51\143"+
    "\4\146\1\214\63\146\7\0\1\215\1\0\1\215\57\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\7\4\1\216\15\4\25\0\1\151\6\0\1\57\60\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\2\4\1\217\22\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\4\4\1\220\20\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\7\4\1\221\15\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\10\4\1\222\14\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\11\4\1\223\13\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\6\4\1\224\16\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\7\4\1\225\15\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\16\4\1\226\6\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\227\24\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\7\4\1\230\15\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\16\4"+
    "\1\231\6\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\20\4\1\232\4\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\10\4"+
    "\1\233\14\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\10\4\1\234\14\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\2\4"+
    "\1\235\22\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\1\236\24\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\10\4\1\237"+
    "\14\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\240\17\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\10\4\1\241"+
    "\14\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\2\4\1\242\22\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\11\4\1\243"+
    "\13\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\12\4\1\244\12\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\10\4\1\245"+
    "\14\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\3\4\1\246\21\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\7\4\1\247"+
    "\15\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\1\4\1\250\15\4\1\251\5\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\2\4\1\252\22\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\11\4\1\253\13\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\11\4\1\254\13\4\62\0\1\255\31\0\5\143\1\0"+
    "\1\143\1\256\1\143\1\256\4\143\1\0\51\143\3\0"+
    "\1\257\73\0\1\260\1\0\1\260\57\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\10\4\1\261"+
    "\14\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\4\4\1\262\20\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\12\4\1\263"+
    "\12\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\7\4\1\264\15\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\10\4\1\265"+
    "\14\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\266\17\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\7\4\1\267"+
    "\15\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\22\4\1\270\2\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\1\271\24\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\1\4\1\272\23\4\25\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\14\4\1\273\10\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\1\4\1\274\23\4\25\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\12\4\1\275\12\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\12\4\1\276\12\4\25\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\16\4\1\277\6\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\1\300\24\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\11\4\1\301\13\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\302\24\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\2\4\1\303\22\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\16\4"+
    "\1\304\6\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\10\4\1\305\14\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\10\4"+
    "\1\306\14\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\10\4\1\307\14\4\53\0\1\310"+
    "\40\0\5\143\1\0\1\143\1\311\1\143\1\311\4\143"+
    "\1\0\51\143\1\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\11\4\1\312\13\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\2\4"+
    "\1\313\22\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\10\4\1\314\14\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\2\4"+
    "\1\315\22\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\7\4\1\316\15\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\21\4"+
    "\1\317\3\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\3\4\1\320\21\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\15\4"+
    "\1\321\7\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\13\4\1\322\11\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\1\4"+
    "\1\323\23\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\2\4\1\324\22\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\1\4"+
    "\1\325\23\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\14\4\1\326\10\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\2\4"+
    "\1\327\22\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\14\4\1\330\10\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\1\331"+
    "\2\4\1\332\21\4\55\0\1\333\37\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\2\4\1\334"+
    "\22\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\2\4\1\335\22\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\4\4\1\336"+
    "\20\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\2\4\1\337\22\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\11\4\1\340"+
    "\13\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\341\17\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\10\4\1\342"+
    "\14\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\2\4\1\343\22\4\25\0\2\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\3\0\1\4\1\344"+
    "\23\4\25\0\2\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\3\0\4\4\1\345\20\4\55\0\1\346\37\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\12\4\1\347\12\4\25\0\2\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\4\4\1\350\20\4\25\0"+
    "\2\4\4\0\1\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\351\24\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\10\4\1\352\14\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\10\4"+
    "\1\353\14\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\2\4\1\354\22\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\5\4"+
    "\1\355\17\4\43\0\1\356\51\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\11\4\1\357\13\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\1\4\1\360\23\4\25\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\3\4\1\361\21\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\6\4\1\362\16\4\46\0\1\363\46\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\2\4"+
    "\1\364\22\4\25\0\2\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\2\4\1\365\22\4\25\0\2\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\3\0\7\4"+
    "\1\366\15\4\53\0\1\367\41\0\2\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\3\0\12\4\1\370\12\4"+
    "\25\0\2\4\4\0\1\4\1\0\1\4\1\0\1\4"+
    "\3\0\10\4\1\371\14\4\71\0\1\372\70\0\1\373"+
    "\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\1\11\25\1\10\11"+
    "\1\1\1\11\4\1\1\11\5\0\4\1\2\0\1\11"+
    "\35\1\1\0\7\11\1\1\1\11\4\1\2\0\1\1"+
    "\1\0\1\11\37\1\1\0\1\1\2\0\37\1\1\0"+
    "\1\1\2\11\27\1\1\0\22\1\1\0\12\1\1\0"+
    "\7\1\1\0\4\1\1\0\3\1\1\0\2\1\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
//VARIALES Y METODOS DEL SCANER
/*public ArrayList<TokenError> tabla_Errores;

//public void setTablaErrores(ArrayList<TokenError> tabla){
  //  tabla_Errores = tabla;
//}
*/
private void ErrorScan(String simboloEd, String columna, String linea, String descripcion){
//ventanaPrincipal.errorGlobal(simboloEd,columna,linea,"Error lexico"); 
System.err.println("Error lexico "+simboloEd);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexicoF1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public lexicoF1(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { return new Symbol(sF1.ciclo, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 77: break;
        case 40: 
          { return new Symbol(sF1.para, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 78: break;
        case 66: 
          { return new Symbol(sF1.pordefecto, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 79: break;
        case 5: 
          { return new Symbol(sF1.por, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 80: break;
        case 52: 
          { return new Symbol(sF1.hasta, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 81: break;
        case 31: 
          { return new Symbol(sF1.comparacion, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 82: break;
        case 32: 
          { return new Symbol(sF1.negacion, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 83: break;
        case 2: 
          { return new Symbol(sF1.num, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 84: break;
        case 14: 
          { return new Symbol(sF1.llaveA, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 85: break;
        case 39: 
          { return new Symbol(sF1.nuevo, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 86: break;
        case 42: 
          { return new Symbol(sF1.verdadero, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 87: break;
        case 41: 
          { return new Symbol(sF1.nulo, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 88: break;
        case 15: 
          { return new Symbol(sF1.llaveC, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 89: break;
        case 33: 
          { return new Symbol(sF1.yLogico, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 90: break;
        case 73: 
          { return new Symbol(sF1.casteoDI, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 91: break;
        case 18: 
          { return new Symbol(sF1.coma, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 92: break;
        case 37: 
          { return new Symbol(sF1.caracter, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 93: break;
        case 10: 
          { return new Symbol(sF1.menor, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 94: break;
        case 9: 
          { return new Symbol(sF1.resta, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 95: break;
        case 60: 
          { return new Symbol(sF1.sinosi, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 96: break;
        case 71: 
          { return new Symbol(sF1.casteoInt, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 97: break;
        case 16: 
          { return new Symbol(sF1.corA, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 98: break;
        case 7: 
          { return new Symbol(sF1.suma, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 99: break;
        case 56: 
          { return new Symbol(sF1.imprimir, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 100: break;
        case 55: 
          { return new Symbol(sF1.clasesL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 101: break;
        case 34: 
          { return new Symbol(sF1.oLogico, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 102: break;
        case 46: 
          { return new Symbol(sF1.sino, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 103: break;
        case 27: 
          { return new Symbol(sF1.menorIgual, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 104: break;
        case 4: 
          { return new Symbol(sF1.div, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 105: break;
        case 35: 
          { return new Symbol(sF1.xorLogico, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 106: break;
        case 70: 
          { return new Symbol(sF1.continuar, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 107: break;
        case 44: 
          { return new Symbol(sF1.boolL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 108: break;
        case 20: 
          { return new Symbol(sF1.puntoComa, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 109: break;
        case 17: 
          { return new Symbol(sF1.corC, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 110: break;
        case 43: 
          { return new Symbol(sF1.este, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 111: break;
        case 48: 
          { return new Symbol(sF1.encaso, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 112: break;
        case 51: 
          { return new Symbol(sF1.mientras, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 113: break;
        case 30: 
          { return new Symbol(sF1.asignacion, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 114: break;
        case 38: 
          { return new Symbol(sF1.enteroL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 115: break;
        case 24: 
          { return new Symbol(sF1.cadena, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 116: break;
        case 22: 
          { return new Symbol(sF1.incremento, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 117: break;
        case 76: 
          { return new Symbol(sF1.sobreescritura, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 118: break;
        case 72: 
          { return new Symbol(sF1.protegido, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 119: break;
        case 49: 
          { return new Symbol(sF1.vacioL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 120: break;
        case 28: 
          { return new Symbol(sF1.distinto, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 121: break;
        case 63: 
          { return new Symbol(sF1.retorno, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 122: break;
        case 54: 
          { return new Symbol(sF1.supeL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 123: break;
        case 19: 
          { return new Symbol(sF1.dosPuntos, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 124: break;
        case 36: 
          { return new Symbol(sF1.decimal, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 125: break;
        case 69: 
          { return new Symbol(sF1.casteoIString, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 126: break;
        case 26: 
          { return new Symbol(sF1.hacer, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 127: break;
        case 57: 
          { return new Symbol(sF1.falso, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 128: break;
        case 47: 
          { return new Symbol(sF1.caracterL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 129: break;
        case 25: 
          { return new Symbol(sF1.si, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 130: break;
        case 67: 
          { return new Symbol(sF1.herencia, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 131: break;
        case 68: 
          { return new Symbol(sF1.privado, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 132: break;
        case 3: 
          { return new Symbol(sF1.id, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 133: break;
        case 75: 
          { return new Symbol(sF1.casteoDouble, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 134: break;
        case 11: 
          { return new Symbol(sF1.mayor, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 135: break;
        case 61: 
          { return new Symbol(sF1.interruptor, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 136: break;
        case 1: 
          { System.out.println("Error Lexico -> Simbolo: \""+yytext()+"\" Linea: "+(yyline+1)+" Columna: "+(yycolumn+1) );
                        pantallaPincipal.errorLexLienzo(yytext(),""+ yycolumn,""+ yyline, "Lexico");
                     //tabla_Errores.add(new TokenError("Lexico","Lexema no pertenece al lenguaje",yytext(),String.valueOf(yyline+1),String.valueOf(yycolumn+1)));
//ventanaPrincipal.errorGlobal(yytext(),String.valueOf(yychar),String.valueOf(yyline),"Lexico");
          }
        case 137: break;
        case 23: 
          { return new Symbol(sF1.decremento, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 138: break;
        case 53: 
          { return new Symbol(sF1.detener, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 139: break;
        case 62: 
          { return new Symbol(sF1.cadenaL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 140: break;
        case 50: 
          { return new Symbol(sF1.path, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 141: break;
        case 12: 
          { return new Symbol(sF1.parA, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 142: break;
        case 59: 
          { return new Symbol(sF1.doubleL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 143: break;
        case 8: 
          { return new Symbol(sF1.punto, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 144: break;
        case 65: 
          { return new Symbol(sF1.publico, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 145: break;
        case 58: 
          { return new Symbol(sF1.importar, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 146: break;
        case 13: 
          { return new Symbol(sF1.parC, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 147: break;
        case 64: 
          { return new Symbol(sF1.repite, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 148: break;
        case 21: 
          { return new Symbol(sF1.pot, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 149: break;
        case 29: 
          { return new Symbol(sF1.mayorIgual, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 150: break;
        case 74: 
          { return new Symbol(sF1.casteoDString, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 151: break;
        case 6: 
          { 
          }
        case 152: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sF1.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
