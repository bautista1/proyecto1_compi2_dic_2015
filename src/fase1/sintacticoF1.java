
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Dec 07 01:45:57 CST 2015
//----------------------------------------------------

package fase1;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Mon Dec 07 01:45:57 CST 2015
  */
public class sintacticoF1 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoF1() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoF1(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\020\011\000\002\020\013" +
    "\000\002\021\004\000\002\021\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\010\000\002\006" +
    "\010\000\002\006\004\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\011\005\000\002\011\007\000\002" +
    "\011\010\000\002\011\006\000\002\012\005\000\002\012" +
    "\003\000\002\013\011\000\002\013\007\000\002\013\006" +
    "\000\002\013\010\000\002\014\006\000\002\014\005\000" +
    "\002\015\013\000\002\015\014\000\002\015\012\000\002" +
    "\015\013\000\002\015\014\000\002\015\015\000\002\015" +
    "\013\000\002\015\014\000\002\017\006\000\002\017\004" +
    "\000\002\016\005\000\002\016\003\000\002\023\012\000" +
    "\002\023\013\000\002\023\006\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\022\004\000\002\022" +
    "\003\000\002\024\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\010\000\002\026\007\000\002\026" +
    "\011\000\002\026\003\000\002\026\003\000\002\026\005" +
    "\000\002\026\006\000\002\026\004\000\002\027\014\000" +
    "\002\030\010\000\002\030\004\000\002\030\002\000\002" +
    "\031\013\000\002\032\004\000\002\032\003\000\002\033" +
    "\007\000\002\033\006\000\002\034\004\000\002\035\013" +
    "\000\002\036\004\000\002\036\005\000\002\036\003\000" +
    "\002\036\004\000\002\037\015\000\002\040\015\000\002" +
    "\041\021\000\002\042\010\000\002\043\005\000\002\043" +
    "\003\000\002\044\005\000\002\044\003\000\002\045\005" +
    "\000\002\045\003\000\002\046\004\000\002\046\003\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\003\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\004\000" +
    "\002\050\004\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\010\000\002\050" +
    "\007\000\002\050\005\000\002\050\010\000\002\050\005" +
    "\000\002\050\006\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\003\000\002\050\003\000\002" +
    "\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\004\013\006\001\002\000\004\002\u017f\001" +
    "\002\000\006\002\ufffe\013\ufffe\001\002\000\004\112\011" +
    "\001\002\000\006\002\000\013\006\001\002\000\006\002" +
    "\uffff\013\uffff\001\002\000\006\050\013\057\012\001\002" +
    "\000\004\064\u017b\001\002\000\004\112\014\001\002\000" +
    "\004\057\015\001\002\000\004\064\016\001\002\000\034" +
    "\004\035\005\043\006\042\007\044\010\032\011\027\044" +
    "\020\045\030\046\026\047\036\052\017\053\045\112\033" +
    "\001\002\000\026\004\035\005\043\006\042\007\044\010" +
    "\032\011\027\044\020\045\030\046\026\112\u0174\001\002" +
    "\000\020\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\112\uffcf\001\002\000\034\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\044\ufff4\045\ufff4\046\ufff4\052" +
    "\ufff4\053\ufff4\064\ufff4\112\ufff4\001\002\000\020\004\035" +
    "\005\043\006\042\007\044\010\032\011\027\112\u0156\001" +
    "\002\000\034\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\044\ufff8\045\ufff8\046\ufff8\052\ufff8\053\ufff8\064" +
    "\ufff8\112\ufff8\001\002\000\004\064\u0153\001\002\000\034" +
    "\004\035\005\043\006\042\007\044\010\032\011\027\044" +
    "\020\045\030\046\026\052\017\053\045\064\ufffa\112\033" +
    "\001\002\000\020\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\112\uffcd\001\002\000\004\112\uffeb\001\002" +
    "\000\020\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\112\uffce\001\002\000\034\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\044\ufff7\045\ufff7\046\ufff7\052" +
    "\ufff7\053\ufff7\064\ufff7\112\ufff7\001\002\000\004\112\uffed" +
    "\001\002\000\010\054\u0135\055\u0136\112\u0137\001\002\000" +
    "\034\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\052\ufff6\053\ufff6\064\ufff6\112" +
    "\ufff6\001\002\000\004\112\ufff0\001\002\000\004\114\u0131" +
    "\001\002\000\032\004\035\005\043\006\042\007\044\010" +
    "\032\011\027\044\020\045\030\046\026\052\017\053\045" +
    "\112\033\001\002\000\004\112\163\001\002\000\034\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\052\ufff5\053\ufff5\064\ufff5\112\ufff5\001" +
    "\002\000\004\112\uffec\001\002\000\004\112\uffef\001\002" +
    "\000\004\112\uffee\001\002\000\004\054\046\001\002\000" +
    "\004\112\047\001\002\000\004\065\050\001\002\000\034" +
    "\014\072\015\064\051\053\053\073\055\070\057\065\061" +
    "\063\067\067\110\060\111\055\112\066\113\061\115\052" +
    "\001\002\000\024\056\uffa0\060\uffa0\062\uffa0\063\uffa0\064" +
    "\uffa0\066\uffa0\070\uffa0\071\uffa0\072\uffa0\001\002\000\056" +
    "\056\uff8c\060\uff8c\062\uff8c\063\uff8c\064\uff8c\066\uff8c\070" +
    "\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c" +
    "\077\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\107\uff8c\001\002\000\004\054\156\001\002" +
    "\000\022\056\uffa4\060\uffa4\062\uffa4\063\uffa4\064\uffa4\066" +
    "\uffa4\071\uffa4\072\107\001\002\000\056\056\uff8e\060\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\066\uff8e\070\uff8e\071\uff8e\072" +
    "\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107" +
    "\uff8e\001\002\000\040\056\uff9e\060\uff9e\062\uff9e\063\uff9e" +
    "\064\uff9e\066\uff9e\070\uff9e\071\uff9e\072\uff9e\073\116\074" +
    "\123\075\117\076\120\077\122\100\121\001\002\000\006" +
    "\066\155\071\105\001\002\000\056\056\uff8f\060\uff8f\062" +
    "\uff8f\063\uff8f\064\uff8f\066\uff8f\070\uff8f\071\uff8f\072\uff8f" +
    "\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\101" +
    "\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107\uff8f" +
    "\001\002\000\056\056\uff8d\060\uff8d\062\uff8d\063\uff8d\064" +
    "\uff8d\066\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d" +
    "\075\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103" +
    "\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d\001\002\000\056" +
    "\056\uff97\060\uff97\062\uff97\063\uff97\064\uff97\066\uff97\070" +
    "\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97" +
    "\077\uff97\100\uff97\101\125\102\126\103\127\104\133\105" +
    "\132\106\130\107\131\001\002\000\034\014\072\015\064" +
    "\051\053\053\073\055\070\057\065\061\063\067\067\110" +
    "\060\111\055\112\066\113\061\115\052\001\002\000\056" +
    "\056\uff81\060\uff81\062\uff81\063\uff81\064\uff81\066\uff81\070" +
    "\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81\076\uff81" +
    "\077\uff81\100\uff81\101\uff81\102\uff81\103\uff81\104\uff81\105" +
    "\uff81\106\uff81\107\uff81\001\002\000\034\014\072\015\064" +
    "\051\053\053\073\055\070\057\065\061\063\067\067\110" +
    "\060\111\055\112\066\113\061\115\052\001\002\000\060" +
    "\055\146\056\uff80\060\uff80\062\uff80\063\uff80\064\uff80\066" +
    "\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80\075\uff80" +
    "\076\uff80\077\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104" +
    "\uff80\105\uff80\106\uff80\107\uff80\001\002\000\032\014\072" +
    "\015\064\051\053\053\073\055\070\057\065\061\063\110" +
    "\060\111\055\112\066\113\061\115\052\001\002\000\034" +
    "\014\072\015\064\051\053\053\073\055\070\057\065\061" +
    "\063\067\067\110\060\111\055\112\066\113\061\115\052" +
    "\001\002\000\024\056\uffa2\060\uffa2\062\uffa2\063\uffa2\064" +
    "\uffa2\066\uffa2\070\111\071\uffa2\072\uffa2\001\002\000\056" +
    "\056\uff82\060\uff82\062\uff82\063\uff82\064\uff82\066\uff82\070" +
    "\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\076\uff82" +
    "\077\uff82\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105" +
    "\uff82\106\uff82\107\uff82\001\002\000\004\054\074\001\002" +
    "\000\004\112\075\001\002\000\060\055\076\056\uff89\060" +
    "\uff89\062\uff89\063\uff89\064\uff89\066\uff89\070\uff89\071\uff89" +
    "\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100" +
    "\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89\106\uff89" +
    "\107\uff89\001\002\000\036\014\072\015\064\051\053\053" +
    "\073\055\070\056\100\057\065\061\063\067\067\110\060" +
    "\111\055\112\066\113\061\115\052\001\002\000\010\056" +
    "\uffd3\063\uffd3\071\105\001\002\000\056\056\uff8a\060\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\066\uff8a\070\uff8a\071\uff8a\072" +
    "\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a" +
    "\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107" +
    "\uff8a\001\002\000\006\056\103\063\102\001\002\000\034" +
    "\014\072\015\064\051\053\053\073\055\070\057\065\061" +
    "\063\067\067\110\060\111\055\112\066\113\061\115\052" +
    "\001\002\000\056\056\uff8b\060\uff8b\062\uff8b\063\uff8b\064" +
    "\uff8b\066\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b" +
    "\075\uff8b\076\uff8b\077\uff8b\100\uff8b\101\uff8b\102\uff8b\103" +
    "\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b\001\002\000\010" +
    "\056\uffd4\063\uffd4\071\105\001\002\000\034\014\072\015" +
    "\064\051\053\053\073\055\070\057\065\061\063\067\067" +
    "\110\060\111\055\112\066\113\061\115\052\001\002\000" +
    "\022\056\uffa5\060\uffa5\062\uffa5\063\uffa5\064\uffa5\066\uffa5" +
    "\071\uffa5\072\107\001\002\000\034\014\072\015\064\051" +
    "\053\053\073\055\070\057\065\061\063\067\067\110\060" +
    "\111\055\112\066\113\061\115\052\001\002\000\024\056" +
    "\uffa3\060\uffa3\062\uffa3\063\uffa3\064\uffa3\066\uffa3\070\111" +
    "\071\uffa3\072\uffa3\001\002\000\034\014\072\015\064\051" +
    "\053\053\073\055\070\057\065\061\063\067\067\110\060" +
    "\111\055\112\066\113\061\115\052\001\002\000\024\056" +
    "\uffa1\060\uffa1\062\uffa1\063\uffa1\064\uffa1\066\uffa1\070\uffa1" +
    "\071\uffa1\072\uffa1\001\002\000\006\056\114\071\105\001" +
    "\002\000\056\056\uff84\060\uff84\062\uff84\063\uff84\064\uff84" +
    "\066\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075" +
    "\uff84\076\uff84\077\uff84\100\uff84\101\uff84\102\uff84\103\uff84" +
    "\104\uff84\105\uff84\106\uff84\107\uff84\001\002\000\040\056" +
    "\uff9f\060\uff9f\062\uff9f\063\uff9f\064\uff9f\066\uff9f\070\uff9f" +
    "\071\uff9f\072\uff9f\073\116\074\123\075\117\076\120\077" +
    "\122\100\121\001\002\000\032\014\072\015\064\051\053" +
    "\053\073\055\070\057\065\061\063\110\060\111\055\112" +
    "\066\113\061\115\052\001\002\000\032\014\072\015\064" +
    "\051\053\053\073\055\070\057\065\061\063\110\060\111" +
    "\055\112\066\113\061\115\052\001\002\000\032\014\072" +
    "\015\064\051\053\053\073\055\070\057\065\061\063\110" +
    "\060\111\055\112\066\113\061\115\052\001\002\000\032" +
    "\014\072\015\064\051\053\053\073\055\070\057\065\061" +
    "\063\110\060\111\055\112\066\113\061\115\052\001\002" +
    "\000\032\014\072\015\064\051\053\053\073\055\070\057" +
    "\065\061\063\110\060\111\055\112\066\113\061\115\052" +
    "\001\002\000\032\014\072\015\064\051\053\053\073\055" +
    "\070\057\065\061\063\110\060\111\055\112\066\113\061" +
    "\115\052\001\002\000\056\056\uff98\060\uff98\062\uff98\063" +
    "\uff98\064\uff98\066\uff98\070\uff98\071\uff98\072\uff98\073\uff98" +
    "\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98\101\125\102" +
    "\126\103\127\104\133\105\132\106\130\107\131\001\002" +
    "\000\032\014\072\015\064\051\053\053\073\055\070\057" +
    "\065\061\063\110\060\111\055\112\066\113\061\115\052" +
    "\001\002\000\032\014\072\015\064\051\053\053\073\055" +
    "\070\057\065\061\063\110\060\111\055\112\066\113\061" +
    "\115\052\001\002\000\032\014\072\015\064\051\053\053" +
    "\073\055\070\057\065\061\063\110\060\111\055\112\066" +
    "\113\061\115\052\001\002\000\056\056\uff91\060\uff91\062" +
    "\uff91\063\uff91\064\uff91\066\uff91\070\uff91\071\uff91\072\uff91" +
    "\073\uff91\074\uff91\075\uff91\076\uff91\077\uff91\100\uff91\101" +
    "\uff91\102\uff91\103\uff91\104\uff91\105\uff91\106\uff91\107\uff91" +
    "\001\002\000\056\056\uff90\060\uff90\062\uff90\063\uff90\064" +
    "\uff90\066\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90" +
    "\075\uff90\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103" +
    "\uff90\104\uff90\105\uff90\106\uff90\107\uff90\001\002\000\032" +
    "\014\072\015\064\051\053\053\073\055\070\057\065\061" +
    "\063\110\060\111\055\112\066\113\061\115\052\001\002" +
    "\000\032\014\072\015\064\051\053\053\073\055\070\057" +
    "\065\061\063\110\060\111\055\112\066\113\061\115\052" +
    "\001\002\000\056\056\uff93\060\uff93\062\uff93\063\uff93\064" +
    "\uff93\066\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93" +
    "\075\uff93\076\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103" +
    "\uff93\104\uff93\105\132\106\130\107\131\001\002\000\056" +
    "\056\uff92\060\uff92\062\uff92\063\uff92\064\uff92\066\uff92\070" +
    "\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92" +
    "\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\104\uff92\105" +
    "\uff92\106\130\107\131\001\002\000\056\056\uff94\060\uff94" +
    "\062\uff94\063\uff94\064\uff94\066\uff94\070\uff94\071\uff94\072" +
    "\uff94\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100\uff94" +
    "\101\uff94\102\uff94\103\uff94\104\uff94\105\132\106\130\107" +
    "\131\001\002\000\056\056\uff95\060\uff95\062\uff95\063\uff95" +
    "\064\uff95\066\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074" +
    "\uff95\075\uff95\076\uff95\077\uff95\100\uff95\101\uff95\102\uff95" +
    "\103\127\104\133\105\132\106\130\107\131\001\002\000" +
    "\056\056\uff96\060\uff96\062\uff96\063\uff96\064\uff96\066\uff96" +
    "\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076" +
    "\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\127\104\133" +
    "\105\132\106\130\107\131\001\002\000\056\056\uff9d\060" +
    "\uff9d\062\uff9d\063\uff9d\064\uff9d\066\uff9d\070\uff9d\071\uff9d" +
    "\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100" +
    "\uff9d\101\125\102\126\103\127\104\133\105\132\106\130" +
    "\107\131\001\002\000\056\056\uff9c\060\uff9c\062\uff9c\063" +
    "\uff9c\064\uff9c\066\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\125\102" +
    "\126\103\127\104\133\105\132\106\130\107\131\001\002" +
    "\000\056\056\uff9a\060\uff9a\062\uff9a\063\uff9a\064\uff9a\066" +
    "\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a" +
    "\076\uff9a\077\uff9a\100\uff9a\101\125\102\126\103\127\104" +
    "\133\105\132\106\130\107\131\001\002\000\056\056\uff9b" +
    "\060\uff9b\062\uff9b\063\uff9b\064\uff9b\066\uff9b\070\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\100\uff9b\101\125\102\126\103\127\104\133\105\132\106" +
    "\130\107\131\001\002\000\056\056\uff99\060\uff99\062\uff99" +
    "\063\uff99\064\uff99\066\uff99\070\uff99\071\uff99\072\uff99\073" +
    "\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\101\125" +
    "\102\126\103\127\104\133\105\132\106\130\107\131\001" +
    "\002\000\034\014\072\015\064\051\053\053\073\055\070" +
    "\057\065\061\063\067\067\110\060\111\055\112\066\113" +
    "\061\115\052\001\002\000\006\056\150\063\102\001\002" +
    "\000\056\056\uff86\060\uff86\062\uff86\063\uff86\064\uff86\066" +
    "\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86" +
    "\076\uff86\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104" +
    "\uff86\105\uff86\106\uff86\107\uff86\001\002\000\006\060\152" +
    "\071\105\001\002\000\056\056\uff85\060\uff85\062\uff85\063" +
    "\uff85\064\uff85\066\uff85\070\uff85\071\uff85\072\uff85\073\uff85" +
    "\074\uff85\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85\102" +
    "\uff85\103\uff85\104\uff85\105\uff85\106\uff85\107\uff85\001\002" +
    "\000\006\062\154\071\105\001\002\000\056\056\uff83\060" +
    "\uff83\062\uff83\063\uff83\064\uff83\066\uff83\070\uff83\071\uff83" +
    "\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83\100" +
    "\uff83\101\uff83\102\uff83\103\uff83\104\uff83\105\uff83\106\uff83" +
    "\107\uff83\001\002\000\034\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\044\ufff2\045\ufff2\046\ufff2\052\ufff2" +
    "\053\ufff2\064\ufff2\112\ufff2\001\002\000\004\112\157\001" +
    "\002\000\060\055\160\056\uff87\060\uff87\062\uff87\063\uff87" +
    "\064\uff87\066\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074" +
    "\uff87\075\uff87\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87" +
    "\103\uff87\104\uff87\105\uff87\106\uff87\107\uff87\001\002\000" +
    "\034\014\072\015\064\051\053\053\073\055\070\057\065" +
    "\061\063\067\067\110\060\111\055\112\066\113\061\115" +
    "\052\001\002\000\006\056\162\063\102\001\002\000\056" +
    "\056\uff88\060\uff88\062\uff88\063\uff88\064\uff88\066\uff88\070" +
    "\uff88\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88" +
    "\077\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105" +
    "\uff88\106\uff88\107\uff88\001\002\000\014\055\175\061\173" +
    "\063\uffe5\065\uffe5\066\uffe5\001\002\000\010\063\165\065" +
    "\167\066\166\001\002\000\004\112\172\001\002\000\062" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\016" +
    "\uffea\021\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\032\uffea\033\uffea\042\uffea\044\uffea\045\uffea\046\uffea\051" +
    "\uffea\052\uffea\053\uffea\064\uffea\112\uffea\001\002\000\034" +
    "\014\072\015\064\051\053\053\073\055\070\057\065\061" +
    "\063\067\067\110\060\111\055\112\066\113\061\115\052" +
    "\001\002\000\006\066\171\071\105\001\002\000\062\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\016\uffe9" +
    "\021\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032" +
    "\uffe9\033\uffe9\042\uffe9\044\uffe9\045\uffe9\046\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\064\uffe9\112\uffe9\001\002\000\010\063" +
    "\uffe6\065\uffe6\066\uffe6\001\002\000\034\014\072\015\064" +
    "\051\053\053\073\055\070\057\065\061\063\067\067\110" +
    "\060\111\055\112\066\113\061\115\052\001\002\000\010" +
    "\061\u0101\065\u0129\066\u0128\001\002\000\020\004\035\005" +
    "\043\006\042\007\044\010\032\011\027\056\177\001\002" +
    "\000\004\112\u0127\001\002\000\004\057\u0122\001\002\000" +
    "\006\056\202\063\201\001\002\000\016\004\035\005\043" +
    "\006\042\007\044\010\032\011\027\001\002\000\004\057" +
    "\203\001\002\000\004\064\204\001\002\000\052\004\035" +
    "\005\043\006\042\007\044\010\032\011\217\016\232\021" +
    "\221\024\227\026\213\027\215\030\220\032\205\033\231" +
    "\042\226\044\020\045\030\046\026\051\206\112\224\001" +
    "\002\000\004\055\u0112\001\002\000\006\054\u0108\055\u0109" +
    "\001\002\000\056\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\016\uffc5\021\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\032\uffc5\033\uffc5\042\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\051\uffc5\064\uffc5\112\uffc5\001\002\000\016" +
    "\004\035\005\043\006\042\007\044\010\032\011\027\001" +
    "\002\000\056\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\016\uffc1\021\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\032\uffc1\033\uffc1\042\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\051\uffc1\064\uffc1\112\uffc1\001\002\000\054\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\016\uffcb" +
    "\021\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\032\uffcb\033" +
    "\uffcb\042\uffcb\044\uffcb\045\uffcb\046\uffcb\051\uffcb\064\uffcb" +
    "\112\uffcb\001\002\000\004\055\361\001\002\000\056\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\016\uffc6" +
    "\021\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\032" +
    "\uffc6\033\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\051\uffc6" +
    "\064\uffc6\112\uffc6\001\002\000\004\057\347\001\002\000" +
    "\056\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\016\uffc7\021\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\032\uffc7\033\uffc7\042\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\051\uffc7\064\uffc7\112\uffc7\001\002\000\006\034\342\112" +
    "\uffeb\001\002\000\004\057\322\001\002\000\004\055\275" +
    "\001\002\000\056\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\016\uffbd\021\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\032\uffbd\033\uffbd\042\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\051\uffbd\064\uffbd\112\uffbd\001\002\000\056" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\016" +
    "\uffc3\021\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\032\uffc3\033\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\051" +
    "\uffc3\064\uffc3\112\uffc3\001\002\000\004\065\272\001\002" +
    "\000\056\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\016\uffc4\021\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\032\uffc4\033\uffc4\042\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\051\uffc4\064\uffc4\112\uffc4\001\002\000\034\014\072" +
    "\015\064\051\053\053\073\055\070\057\065\061\063\067" +
    "\067\110\060\111\055\112\066\113\061\115\052\001\002" +
    "\000\004\066\267\001\002\000\056\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\016\uffc2\021\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\032\uffc2\033\uffc2\042" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\051\uffc2\064\uffc2\112\uffc2" +
    "\001\002\000\004\057\262\001\002\000\004\055\242\001" +
    "\002\000\004\112\241\001\002\000\056\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\016\uffbc\021\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc" +
    "\042\uffbc\044\uffbc\045\uffbc\046\uffbc\051\uffbc\064\uffbc\112" +
    "\uffbc\001\002\000\054\004\035\005\043\006\042\007\044" +
    "\010\032\011\217\016\232\021\221\024\227\026\213\027" +
    "\215\030\220\032\205\033\231\042\226\044\020\045\030" +
    "\046\026\051\206\064\237\112\224\001\002\000\054\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\016\uffcc" +
    "\021\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc\033" +
    "\uffcc\042\uffcc\044\uffcc\045\uffcc\046\uffcc\051\uffcc\064\uffcc" +
    "\112\uffcc\001\002\000\004\060\240\001\002\000\034\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\052\uffdd\053\uffdd\064\uffdd\112\uffdd\001" +
    "\002\000\012\061\173\063\uffe5\065\uffe5\066\uffe5\001\002" +
    "\000\034\014\072\015\064\051\053\053\073\055\070\057" +
    "\065\061\063\067\067\110\060\111\055\112\066\113\061" +
    "\115\052\001\002\000\006\056\244\071\105\001\002\000" +
    "\004\057\245\001\002\000\004\064\246\001\002\000\052" +
    "\004\035\005\043\006\042\007\044\010\032\011\217\016" +
    "\232\021\221\024\227\026\213\027\215\030\220\032\205" +
    "\033\231\042\226\044\020\045\030\046\026\051\206\112" +
    "\224\001\002\000\054\004\035\005\043\006\042\007\044" +
    "\010\032\011\217\016\232\021\221\024\227\026\213\027" +
    "\215\030\220\032\205\033\231\042\226\044\020\045\030" +
    "\046\026\051\206\064\250\112\224\001\002\000\004\060" +
    "\251\001\002\000\060\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\016\uffb5\017\252\021\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\032\uffb5\033\uffb5\042\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\051\uffb5\064\uffb5\112\uffb5\001" +
    "\002\000\006\016\232\057\254\001\002\000\056\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\016\uffb8\021" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8" +
    "\033\uffb8\042\uffb8\044\uffb8\045\uffb8\046\uffb8\051\uffb8\064" +
    "\uffb8\112\uffb8\001\002\000\004\064\256\001\002\000\056" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\016" +
    "\uffb6\021\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\032\uffb6\033\uffb6\042\uffb6\044\uffb6\045\uffb6\046\uffb6\051" +
    "\uffb6\064\uffb6\112\uffb6\001\002\000\052\004\035\005\043" +
    "\006\042\007\044\010\032\011\217\016\232\021\221\024" +
    "\227\026\213\027\215\030\220\032\205\033\231\042\226" +
    "\044\020\045\030\046\026\051\206\112\224\001\002\000" +
    "\054\004\035\005\043\006\042\007\044\010\032\011\217" +
    "\016\232\021\221\024\227\026\213\027\215\030\220\032" +
    "\205\033\231\042\226\044\020\045\030\046\026\051\206" +
    "\064\260\112\224\001\002\000\004\060\261\001\002\000" +
    "\056\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\016\uffb7\021\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\032\uffb7\033\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\051\uffb7\064\uffb7\112\uffb7\001\002\000\004\064\263\001" +
    "\002\000\052\004\035\005\043\006\042\007\044\010\032" +
    "\011\217\016\232\021\221\024\227\026\213\027\215\030" +
    "\220\032\205\033\231\042\226\044\020\045\030\046\026" +
    "\051\206\112\224\001\002\000\004\064\265\001\002\000" +
    "\004\060\266\001\002\000\056\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\016\uffa6\021\uffa6\024\uffa6\025" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\032\uffa6\033\uffa6\042\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\051\uffa6\064\uffa6\112\uffa6\001" +
    "\002\000\056\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\016\uffb9\021\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\032\uffb9\033\uffb9\042\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\051\uffb9\064\uffb9\112\uffb9\001\002\000\006\066" +
    "\271\071\105\001\002\000\056\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\016\uffbb\021\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb\033\uffbb\042\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\051\uffbb\064\uffbb\112\uffbb\001" +
    "\002\000\034\014\072\015\064\051\053\053\073\055\070" +
    "\057\065\061\063\067\067\110\060\111\055\112\066\113" +
    "\061\115\052\001\002\000\006\066\274\071\105\001\002" +
    "\000\056\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\016\uffba\021\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\032\uffba\033\uffba\042\uffba\044\uffba\045\uffba\046" +
    "\uffba\051\uffba\064\uffba\112\uffba\001\002\000\034\014\072" +
    "\015\064\051\053\053\073\055\070\057\065\061\063\067" +
    "\067\110\060\111\055\112\066\113\061\115\052\001\002" +
    "\000\006\056\277\071\105\001\002\000\004\057\300\001" +
    "\002\000\004\064\301\001\002\000\006\022\303\023\302" +
    "\001\002\000\004\064\317\001\002\000\034\014\072\015" +
    "\064\051\053\053\073\055\070\057\065\061\063\067\067" +
    "\110\060\111\055\112\066\113\061\115\052\001\002\000" +
    "\010\022\303\023\302\064\306\001\002\000\010\022\uffb2" +
    "\023\uffb2\064\uffb2\001\002\000\004\060\310\001\002\000" +
    "\010\022\uffb3\023\uffb3\064\uffb3\001\002\000\056\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\016\uffb4\021" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\032\uffb4" +
    "\033\uffb4\042\uffb4\044\uffb4\045\uffb4\046\uffb4\051\uffb4\064" +
    "\uffb4\112\uffb4\001\002\000\006\064\312\071\105\001\002" +
    "\000\052\004\035\005\043\006\042\007\044\010\032\011" +
    "\217\016\232\021\221\024\227\026\213\027\215\030\220" +
    "\032\205\033\231\042\226\044\020\045\030\046\026\051" +
    "\206\112\224\001\002\000\052\004\035\005\043\006\042" +
    "\007\044\010\032\011\217\016\232\021\221\024\315\026" +
    "\213\027\215\030\220\032\205\033\231\042\226\044\020" +
    "\045\030\046\026\051\206\112\224\001\002\000\010\022" +
    "\uffb1\023\uffb1\064\uffb1\001\002\000\004\066\316\001\002" +
    "\000\060\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\016\uffb9\021\uffb9\022\uffaf\023\uffaf\024\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\032\uffb9\033\uffb9\042\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\051\uffb9\064\uffaf\112\uffb9\001\002\000\052" +
    "\004\035\005\043\006\042\007\044\010\032\011\217\016" +
    "\232\021\221\024\227\026\213\027\215\030\220\032\205" +
    "\033\231\042\226\044\020\045\030\046\026\051\206\112" +
    "\224\001\002\000\052\004\035\005\043\006\042\007\044" +
    "\010\032\011\217\016\232\021\221\024\315\026\213\027" +
    "\215\030\220\032\205\033\231\042\226\044\020\045\030" +
    "\046\026\051\206\112\224\001\002\000\010\022\uffb0\023" +
    "\uffb0\064\uffb0\001\002\000\004\064\323\001\002\000\054" +
    "\004\035\005\043\006\042\007\044\010\032\011\217\016" +
    "\232\021\221\024\227\025\326\026\213\027\215\030\220" +
    "\032\205\033\231\042\226\044\020\045\030\046\026\051" +
    "\206\112\224\001\002\000\056\004\035\005\043\006\042" +
    "\007\044\010\032\011\217\016\232\021\221\024\227\025" +
    "\331\026\213\027\215\030\220\032\205\033\231\042\226" +
    "\044\020\045\030\046\026\051\206\064\332\112\224\001" +
    "\002\000\056\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab" +
    "\011\uffab\016\uffab\021\uffab\024\uffab\025\uffab\026\uffab\027" +
    "\uffab\030\uffab\032\uffab\033\uffab\042\uffab\044\uffab\045\uffab" +
    "\046\uffab\051\uffab\064\uffab\112\uffab\001\002\000\004\066" +
    "\327\001\002\000\056\004\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\011\uffaa\016\uffaa\021\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\032\uffaa\033\uffaa\042\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\051\uffaa\064\uffaa\112\uffaa\001\002\000" +
    "\056\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad" +
    "\016\uffad\021\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\032\uffad\033\uffad\042\uffad\044\uffad\045\uffad\046\uffad" +
    "\051\uffad\064\uffad\112\uffad\001\002\000\004\066\341\001" +
    "\002\000\004\060\333\001\002\000\004\031\334\001\002" +
    "\000\004\055\335\001\002\000\034\014\072\015\064\051" +
    "\053\053\073\055\070\057\065\061\063\067\067\110\060" +
    "\111\055\112\066\113\061\115\052\001\002\000\006\056" +
    "\337\071\105\001\002\000\004\066\340\001\002\000\056" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\016" +
    "\uffa8\021\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\032\uffa8\033\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8\051" +
    "\uffa8\064\uffa8\112\uffa8\001\002\000\056\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\010\uffac\011\uffac\016\uffac\021\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\032\uffac\033\uffac" +
    "\042\uffac\044\uffac\045\uffac\046\uffac\051\uffac\064\uffac\112" +
    "\uffac\001\002\000\004\055\343\001\002\000\034\014\072" +
    "\015\064\051\053\053\073\055\070\057\065\061\063\067" +
    "\067\110\060\111\055\112\066\113\061\115\052\001\002" +
    "\000\006\056\345\071\105\001\002\000\004\066\346\001" +
    "\002\000\056\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\016\uffc0\021\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\032\uffc0\033\uffc0\042\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\051\uffc0\064\uffc0\112\uffc0\001\002\000\004\064" +
    "\350\001\002\000\054\004\035\005\043\006\042\007\044" +
    "\010\032\011\217\016\232\021\221\024\227\025\326\026" +
    "\213\027\215\030\220\032\205\033\231\042\226\044\020" +
    "\045\030\046\026\051\206\112\224\001\002\000\056\004" +
    "\035\005\043\006\042\007\044\010\032\011\217\016\232" +
    "\021\221\024\227\025\331\026\213\027\215\030\220\032" +
    "\205\033\231\042\226\044\020\045\030\046\026\051\206" +
    "\064\352\112\224\001\002\000\004\060\353\001\002\000" +
    "\004\026\354\001\002\000\004\055\355\001\002\000\034" +
    "\014\072\015\064\051\053\053\073\055\070\057\065\061" +
    "\063\067\067\110\060\111\055\112\066\113\061\115\052" +
    "\001\002\000\006\056\357\071\105\001\002\000\004\066" +
    "\360\001\002\000\056\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\016\uffa9\021\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\032\uffa9\033\uffa9\042\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\051\uffa9\064\uffa9\112\uffa9\001\002\000" +
    "\034\014\072\015\064\051\053\053\073\055\070\057\065" +
    "\061\063\067\067\110\060\111\055\112\066\113\061\115" +
    "\052\001\002\000\006\056\363\071\105\001\002\000\004" +
    "\057\364\001\002\000\004\064\365\001\002\000\054\004" +
    "\035\005\043\006\042\007\044\010\032\011\217\016\232" +
    "\021\221\024\227\025\326\026\213\027\215\030\220\032" +
    "\205\033\231\042\226\044\020\045\030\046\026\051\206" +
    "\112\224\001\002\000\056\004\035\005\043\006\042\007" +
    "\044\010\032\011\217\016\232\021\221\024\227\025\331" +
    "\026\213\027\215\030\220\032\205\033\231\042\226\044" +
    "\020\045\030\046\026\051\206\064\367\112\224\001\002" +
    "\000\004\060\370\001\002\000\056\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\016\uffae\021\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\032\uffae\033\uffae\042" +
    "\uffae\044\uffae\045\uffae\046\uffae\051\uffae\064\uffae\112\uffae" +
    "\001\002\000\004\112\372\001\002\000\012\061\173\063" +
    "\uffe5\065\uffe5\066\uffe5\001\002\000\010\063\165\065\375" +
    "\066\374\001\002\000\062\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\016\uffe7\021\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\042\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\051\uffe7\052\uffe7\053\uffe7\064\uffe7" +
    "\112\uffe7\001\002\000\034\014\072\015\064\051\053\053" +
    "\073\055\070\057\065\061\063\067\067\110\060\111\055" +
    "\112\066\113\061\115\052\001\002\000\006\066\377\071" +
    "\105\001\002\000\062\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\016\uffe8\021\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\032\uffe8\033\uffe8\042\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\051\uffe8\052\uffe8\053\uffe8\064\uffe8\112" +
    "\uffe8\001\002\000\010\061\u0101\065\u0103\066\u0102\001\002" +
    "\000\034\014\072\015\064\051\053\053\073\055\070\057" +
    "\065\061\063\067\067\110\060\111\055\112\066\113\061" +
    "\115\052\001\002\000\062\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\016\uffe3\021\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\032\uffe3\033\uffe3\042\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\051\uffe3\052\uffe3\053\uffe3\064\uffe3" +
    "\112\uffe3\001\002\000\034\014\072\015\064\051\053\053" +
    "\073\055\070\057\065\061\063\067\067\110\060\111\055" +
    "\112\066\113\061\115\052\001\002\000\006\066\u0105\071" +
    "\105\001\002\000\062\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\016\uffe4\021\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\032\uffe4\033\uffe4\042\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\051\uffe4\052\uffe4\053\uffe4\064\uffe4\112" +
    "\uffe4\001\002\000\006\062\u0107\071\105\001\002\000\010" +
    "\061\uffe0\065\uffe0\066\uffe0\001\002\000\004\112\u010d\001" +
    "\002\000\034\014\072\015\064\051\053\053\073\055\070" +
    "\057\065\061\063\067\067\110\060\111\055\112\066\113" +
    "\061\115\052\001\002\000\006\056\u010b\063\102\001\002" +
    "\000\004\066\u010c\001\002\000\056\004\uffbf\005\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\016\uffbf\021\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf\033\uffbf\042" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\051\uffbf\064\uffbf\112\uffbf" +
    "\001\002\000\004\055\u010e\001\002\000\034\014\072\015" +
    "\064\051\053\053\073\055\070\057\065\061\063\067\067" +
    "\110\060\111\055\112\066\113\061\115\052\001\002\000" +
    "\006\056\u0110\063\102\001\002\000\004\066\u0111\001\002" +
    "\000\056\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\016\uffbe\021\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\032\uffbe\033\uffbe\042\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\051\uffbe\064\uffbe\112\uffbe\001\002\000\004\112\u0113" +
    "\001\002\000\004\065\u0114\001\002\000\034\014\072\015" +
    "\064\051\053\053\073\055\070\057\065\061\063\067\067" +
    "\110\060\111\055\112\066\113\061\115\052\001\002\000" +
    "\006\066\u0116\071\105\001\002\000\034\014\072\015\064" +
    "\051\053\053\073\055\070\057\065\061\063\067\067\110" +
    "\060\111\055\112\066\113\061\115\052\001\002\000\006" +
    "\066\u0118\071\105\001\002\000\034\014\072\015\064\051" +
    "\053\053\073\055\070\057\065\061\063\067\067\110\060" +
    "\111\055\112\066\113\061\115\052\001\002\000\006\056" +
    "\u011a\071\105\001\002\000\004\057\u011b\001\002\000\004" +
    "\064\u011c\001\002\000\054\004\035\005\043\006\042\007" +
    "\044\010\032\011\217\016\232\021\221\024\227\025\326" +
    "\026\213\027\215\030\220\032\205\033\231\042\226\044" +
    "\020\045\030\046\026\051\206\112\224\001\002\000\056" +
    "\004\035\005\043\006\042\007\044\010\032\011\217\016" +
    "\232\021\221\024\227\025\331\026\213\027\215\030\220" +
    "\032\205\033\231\042\226\044\020\045\030\046\026\051" +
    "\206\064\u011e\112\224\001\002\000\004\060\u011f\001\002" +
    "\000\056\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011" +
    "\uffa7\016\uffa7\021\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\032\uffa7\033\uffa7\042\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\051\uffa7\064\uffa7\112\uffa7\001\002\000\004\112\u0121" +
    "\001\002\000\006\056\uffd6\063\uffd6\001\002\000\004\064" +
    "\u0123\001\002\000\052\004\035\005\043\006\042\007\044" +
    "\010\032\011\217\016\232\021\221\024\227\026\213\027" +
    "\215\030\220\032\205\033\231\042\226\044\020\045\030" +
    "\046\026\051\206\112\224\001\002\000\054\004\035\005" +
    "\043\006\042\007\044\010\032\011\217\016\232\021\221" +
    "\024\227\026\213\027\215\030\220\032\205\033\231\042" +
    "\226\044\020\045\030\046\026\051\206\064\u0125\112\224" +
    "\001\002\000\004\060\u0126\001\002\000\034\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\044\uffde\045\uffde" +
    "\046\uffde\052\uffde\053\uffde\064\uffde\112\uffde\001\002\000" +
    "\006\056\uffd5\063\uffd5\001\002\000\062\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\016\uffe2\021\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2\033\uffe2" +
    "\042\uffe2\044\uffe2\045\uffe2\046\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\064\uffe2\112\uffe2\001\002\000\034\014\072\015\064" +
    "\051\053\053\073\055\070\057\065\061\063\067\067\110" +
    "\060\111\055\112\066\113\061\115\052\001\002\000\006" +
    "\066\u012b\071\105\001\002\000\062\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\016\uffe1\021\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1\042" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\064\uffe1\112\uffe1\001\002\000\006\062\u012d\071\105\001" +
    "\002\000\010\061\uffdf\065\uffdf\066\uffdf\001\002\000\034" +
    "\004\035\005\043\006\042\007\044\010\032\011\027\044" +
    "\020\045\030\046\026\052\017\053\045\064\ufffb\112\033" +
    "\001\002\000\034\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\044\ufff9\045\ufff9\046\ufff9\052\ufff9\053\ufff9" +
    "\064\ufff9\112\ufff9\001\002\000\006\063\u0132\066\u0133\001" +
    "\002\000\006\063\uffc8\066\uffc8\001\002\000\004\114\u0134" +
    "\001\002\000\032\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\044\uffca\045\uffca\046\uffca\052\uffca\053\uffca" +
    "\112\uffca\001\002\000\006\063\uffc9\066\uffc9\001\002\000" +
    "\004\055\u014f\001\002\000\020\004\035\005\043\006\042" +
    "\007\044\010\032\011\027\056\u0142\001\002\000\004\065" +
    "\u0138\001\002\000\006\012\u0139\043\u013a\001\002\000\004" +
    "\112\u013b\001\002\000\034\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\044\uffd0\045\uffd0\046\uffd0\052\uffd0" +
    "\053\uffd0\064\uffd0\112\uffd0\001\002\000\004\055\u013c\001" +
    "\002\000\036\014\072\015\064\051\053\053\073\055\070" +
    "\056\u013d\057\065\061\063\067\067\110\060\111\055\112" +
    "\066\113\061\115\052\001\002\000\004\066\u0141\001\002" +
    "\000\006\056\u013f\063\102\001\002\000\004\066\u0140\001" +
    "\002\000\034\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\044\uffd1\045\uffd1\046\uffd1\052\uffd1\053\uffd1\064" +
    "\uffd1\112\uffd1\001\002\000\034\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\044\uffd2\045\uffd2\046\uffd2\052" +
    "\uffd2\053\uffd2\064\uffd2\112\uffd2\001\002\000\004\057\u014a" +
    "\001\002\000\006\056\u0144\063\201\001\002\000\004\057" +
    "\u0145\001\002\000\004\064\u0146\001\002\000\052\004\035" +
    "\005\043\006\042\007\044\010\032\011\217\016\232\021" +
    "\221\024\227\026\213\027\215\030\220\032\205\033\231" +
    "\042\226\044\020\045\030\046\026\051\206\112\224\001" +
    "\002\000\054\004\035\005\043\006\042\007\044\010\032" +
    "\011\217\016\232\021\221\024\227\026\213\027\215\030" +
    "\220\032\205\033\231\042\226\044\020\045\030\046\026" +
    "\051\206\064\u0148\112\224\001\002\000\004\060\u0149\001" +
    "\002\000\034\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\044\uffdb\045\uffdb\046\uffdb\052\uffdb\053\uffdb\064" +
    "\uffdb\112\uffdb\001\002\000\004\064\u014b\001\002\000\052" +
    "\004\035\005\043\006\042\007\044\010\032\011\217\016" +
    "\232\021\221\024\227\026\213\027\215\030\220\032\205" +
    "\033\231\042\226\044\020\045\030\046\026\051\206\112" +
    "\224\001\002\000\054\004\035\005\043\006\042\007\044" +
    "\010\032\011\217\016\232\021\221\024\227\026\213\027" +
    "\215\030\220\032\205\033\231\042\226\044\020\045\030" +
    "\046\026\051\206\064\u014d\112\224\001\002\000\004\060" +
    "\u014e\001\002\000\034\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\044\uffdc\045\uffdc\046\uffdc\052\uffdc\053" +
    "\uffdc\064\uffdc\112\uffdc\001\002\000\034\014\072\015\064" +
    "\051\053\053\073\055\070\057\065\061\063\067\067\110" +
    "\060\111\055\112\066\113\061\115\052\001\002\000\006" +
    "\056\u0151\063\102\001\002\000\004\066\u0152\001\002\000" +
    "\034\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\052\ufff3\053\ufff3\064\ufff3\112" +
    "\ufff3\001\002\000\004\060\u0154\001\002\000\006\002\ufffc" +
    "\013\ufffc\001\002\000\004\112\u0165\001\002\000\004\055" +
    "\u0157\001\002\000\020\004\035\005\043\006\042\007\044" +
    "\010\032\011\027\056\u0158\001\002\000\004\057\u0160\001" +
    "\002\000\006\056\u015a\063\201\001\002\000\004\057\u015b" +
    "\001\002\000\004\064\u015c\001\002\000\052\004\035\005" +
    "\043\006\042\007\044\010\032\011\217\016\232\021\221" +
    "\024\227\026\213\027\215\030\220\032\205\033\231\042" +
    "\226\044\020\045\030\046\026\051\206\112\224\001\002" +
    "\000\054\004\035\005\043\006\042\007\044\010\032\011" +
    "\217\016\232\021\221\024\227\026\213\027\215\030\220" +
    "\032\205\033\231\042\226\044\020\045\030\046\026\051" +
    "\206\064\u015e\112\224\001\002\000\004\060\u015f\001\002" +
    "\000\034\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\052\uffd7\053\uffd7\064\uffd7" +
    "\112\uffd7\001\002\000\004\064\u0161\001\002\000\052\004" +
    "\035\005\043\006\042\007\044\010\032\011\217\016\232" +
    "\021\221\024\227\026\213\027\215\030\220\032\205\033" +
    "\231\042\226\044\020\045\030\046\026\051\206\112\224" +
    "\001\002\000\054\004\035\005\043\006\042\007\044\010" +
    "\032\011\217\016\232\021\221\024\227\026\213\027\215" +
    "\030\220\032\205\033\231\042\226\044\020\045\030\046" +
    "\026\051\206\064\u0163\112\224\001\002\000\004\060\u0164" +
    "\001\002\000\034\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\044\uffd8\045\uffd8\046\uffd8\052\uffd8\053\uffd8" +
    "\064\uffd8\112\uffd8\001\002\000\014\055\u0166\061\173\063" +
    "\uffe5\065\uffe5\066\uffe5\001\002\000\020\004\035\005\043" +
    "\006\042\007\044\010\032\011\027\056\u0167\001\002\000" +
    "\004\057\u016f\001\002\000\006\056\u0169\063\201\001\002" +
    "\000\004\057\u016a\001\002\000\004\064\u016b\001\002\000" +
    "\052\004\035\005\043\006\042\007\044\010\032\011\217" +
    "\016\232\021\221\024\227\026\213\027\215\030\220\032" +
    "\205\033\231\042\226\044\020\045\030\046\026\051\206" +
    "\112\224\001\002\000\054\004\035\005\043\006\042\007" +
    "\044\010\032\011\217\016\232\021\221\024\227\026\213" +
    "\027\215\030\220\032\205\033\231\042\226\044\020\045" +
    "\030\046\026\051\206\064\u016d\112\224\001\002\000\004" +
    "\060\u016e\001\002\000\034\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\044\uffd9\045\uffd9\046\uffd9\052\uffd9" +
    "\053\uffd9\064\uffd9\112\uffd9\001\002\000\004\064\u0170\001" +
    "\002\000\052\004\035\005\043\006\042\007\044\010\032" +
    "\011\217\016\232\021\221\024\227\026\213\027\215\030" +
    "\220\032\205\033\231\042\226\044\020\045\030\046\026" +
    "\051\206\112\224\001\002\000\054\004\035\005\043\006" +
    "\042\007\044\010\032\011\217\016\232\021\221\024\227" +
    "\026\213\027\215\030\220\032\205\033\231\042\226\044" +
    "\020\045\030\046\026\051\206\064\u0172\112\224\001\002" +
    "\000\004\060\u0173\001\002\000\034\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\044\uffda\045\uffda\046\uffda" +
    "\052\uffda\053\uffda\064\uffda\112\uffda\001\002\000\004\055" +
    "\u0136\001\002\000\004\112\u017a\001\002\000\034\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\052\ufff1\053\ufff1\064\ufff1\112\ufff1\001\002" +
    "\000\020\004\035\005\043\006\042\007\044\010\032\011" +
    "\027\112\u0156\001\002\000\004\112\u0179\001\002\000\004" +
    "\055\u0166\001\002\000\004\055\175\001\002\000\034\004" +
    "\035\005\043\006\042\007\044\010\032\011\027\044\020" +
    "\045\030\046\026\047\036\052\017\053\045\112\033\001" +
    "\002\000\004\064\u017d\001\002\000\004\060\u017e\001\002" +
    "\000\006\002\ufffd\013\ufffd\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\010\003\003\004\006\020\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\024\006\022\007\037\011\030\013" +
    "\040\015\020\021\023\023\033\024\036\051\021\001\001" +
    "\000\010\007\u0174\015\u0175\051\u0176\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u0154\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\u012e\007\037\011" +
    "\030\013\040\015\020\023\033\051\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u012f\001\001\000\022\005" +
    "\u012d\006\022\007\037\011\030\013\040\015\020\023\033" +
    "\051\021\001\001\000\004\012\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\043\056\044\053\045\070\046\050\047\055\050\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\043\152\044\053\045\070\046\050" +
    "\047\055\050\061\001\001\000\002\001\001\000\016\043" +
    "\150\044\053\045\070\046\050\047\055\050\061\001\001" +
    "\000\002\001\001\000\006\047\114\050\061\001\001\000" +
    "\016\043\112\044\053\045\070\046\050\047\055\050\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\100" +
    "\043\076\044\053\045\070\046\050\047\055\050\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\043\103\044\053\045\070\046\050\047\055\050" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\044\105\045\070\046\050\047\055\050\061\001\001\000" +
    "\002\001\001\000\012\045\107\046\050\047\055\050\061" +
    "\001\001\000\002\001\001\000\010\046\111\047\055\050" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\144\001\001\000" +
    "\004\050\143\001\001\000\004\050\142\001\001\000\004" +
    "\050\141\001\001\000\004\050\140\001\001\000\004\050" +
    "\123\001\001\000\002\001\001\000\004\050\137\001\001" +
    "\000\004\050\136\001\001\000\004\050\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\134\001\001" +
    "\000\004\050\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\146\043\076" +
    "\044\053\045\070\046\050\047\055\050\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\160" +
    "\043\076\044\053\045\070\046\050\047\055\050\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\043\167\044\053\045\070\046\050\047\055" +
    "\050\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\043\u012b\044\053\045\070\046\050" +
    "\047\055\050\061\001\001\000\002\001\001\000\006\007" +
    "\175\017\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u011f\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\232\011\221\013\233" +
    "\022\234\026\211\027\215\031\213\035\206\037\224\040" +
    "\222\041\227\042\210\051\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\043\267\044\053\045\070\046\050\047\055" +
    "\050\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\163\001\001" +
    "\000\002\001\001\000\032\007\232\011\221\013\233\026" +
    "\235\027\215\031\213\035\206\037\224\040\222\041\227" +
    "\042\210\051\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\173\001\001\000\016" +
    "\043\242\044\053\045\070\046\050\047\055\050\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\007\232\011\221\013\233\022\246\026\211\027" +
    "\215\031\213\035\206\037\224\040\222\041\227\042\210" +
    "\051\207\001\001\000\032\007\232\011\221\013\233\026" +
    "\235\027\215\031\213\035\206\037\224\040\222\041\227" +
    "\042\210\051\207\001\001\000\002\001\001\000\004\030" +
    "\252\001\001\000\004\027\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\232\011" +
    "\221\013\233\022\256\026\211\027\215\031\213\035\206" +
    "\037\224\040\222\041\227\042\210\051\207\001\001\000" +
    "\032\007\232\011\221\013\233\026\235\027\215\031\213" +
    "\035\206\037\224\040\222\041\227\042\210\051\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\232\011\221\013\233\026\263\027\215\031" +
    "\213\035\206\037\224\040\222\041\227\042\210\051\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\043\272\044\053\045\070\046\050\047\055\050" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\043\275\044\053\045\070\046\050\047\055\050\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\303\033\304\001\001\000\002\001\001\000" +
    "\016\043\310\044\053\045\070\046\050\047\055\050\061" +
    "\001\001\000\004\033\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\007\232\011\221\013\233\022\312\026" +
    "\211\027\215\031\213\035\206\037\224\040\222\041\227" +
    "\042\210\051\207\001\001\000\034\007\232\011\221\013" +
    "\233\026\235\027\215\031\213\034\313\035\206\037\224" +
    "\040\222\041\227\042\210\051\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\007\232" +
    "\011\221\013\233\022\317\026\211\027\215\031\213\035" +
    "\206\037\224\040\222\041\227\042\210\051\207\001\001" +
    "\000\034\007\232\011\221\013\233\026\235\027\215\031" +
    "\213\034\320\035\206\037\224\040\222\041\227\042\210" +
    "\051\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\007\232\011\221\013\233\026\324\027\215\031\213" +
    "\035\206\036\323\037\224\040\222\041\227\042\210\051" +
    "\207\001\001\000\032\007\232\011\221\013\233\026\327" +
    "\027\215\031\213\035\206\037\224\040\222\041\227\042" +
    "\210\051\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\043\335\044\053\045\070\046\050\047\055\050\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\043\343\044" +
    "\053\045\070\046\050\047\055\050\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\007\232\011\221\013\233\026\324\027\215" +
    "\031\213\035\206\036\350\037\224\040\222\041\227\042" +
    "\210\051\207\001\001\000\032\007\232\011\221\013\233" +
    "\026\327\027\215\031\213\035\206\037\224\040\222\041" +
    "\227\042\210\051\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\043\355\044\053\045" +
    "\070\046\050\047\055\050\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\043\361\044" +
    "\053\045\070\046\050\047\055\050\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\232\011\221\013\233\026\324\027\215\031\213\035\206" +
    "\036\365\037\224\040\222\041\227\042\210\051\207\001" +
    "\001\000\032\007\232\011\221\013\233\026\327\027\215" +
    "\031\213\035\206\037\224\040\222\041\227\042\210\051" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\372\001\001\000\004\014\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\043\375\044\053\045\070" +
    "\046\050\047\055\050\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\043\u0105\044\053" +
    "\045\070\046\050\047\055\050\061\001\001\000\002\001" +
    "\001\000\016\043\u0103\044\053\045\070\046\050\047\055" +
    "\050\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\u0109\043\076\044\053\045\070\046\050\047\055\050" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\u010e\043\076\044" +
    "\053\045\070\046\050\047\055\050\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\043\u0114\044\053\045\070" +
    "\046\050\047\055\050\061\001\001\000\002\001\001\000" +
    "\016\043\u0116\044\053\045\070\046\050\047\055\050\061" +
    "\001\001\000\002\001\001\000\016\043\u0118\044\053\045" +
    "\070\046\050\047\055\050\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\232\011" +
    "\221\013\233\026\324\027\215\031\213\035\206\036\u011c" +
    "\037\224\040\222\041\227\042\210\051\207\001\001\000" +
    "\032\007\232\011\221\013\233\026\327\027\215\031\213" +
    "\035\206\037\224\040\222\041\227\042\210\051\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\232\011" +
    "\221\013\233\022\u0123\026\211\027\215\031\213\035\206" +
    "\037\224\040\222\041\227\042\210\051\207\001\001\000" +
    "\032\007\232\011\221\013\233\026\235\027\215\031\213" +
    "\035\206\037\224\040\222\041\227\042\210\051\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\043\u0129\044\053\045\070\046" +
    "\050\047\055\050\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\u012e\007\037\011\030\013\040\015\020\023\033\051\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\175\017\u0142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\u013d\043\076\044" +
    "\053\045\070\046\050\047\055\050\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\232\011" +
    "\221\013\233\022\u0146\026\211\027\215\031\213\035\206" +
    "\037\224\040\222\041\227\042\210\051\207\001\001\000" +
    "\032\007\232\011\221\013\233\026\235\027\215\031\213" +
    "\035\206\037\224\040\222\041\227\042\210\051\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\007\232\011\221\013\233\022\u014b\026\211\027" +
    "\215\031\213\035\206\037\224\040\222\041\227\042\210" +
    "\051\207\001\001\000\032\007\232\011\221\013\233\026" +
    "\235\027\215\031\213\035\206\037\224\040\222\041\227" +
    "\042\210\051\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\u014f\043\076\044\053\045\070\046\050" +
    "\047\055\050\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\372\001\001\000\002\001\001\000\006\007" +
    "\175\017\u0158\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\232\011" +
    "\221\013\233\022\u015c\026\211\027\215\031\213\035\206" +
    "\037\224\040\222\041\227\042\210\051\207\001\001\000" +
    "\032\007\232\011\221\013\233\026\235\027\215\031\213" +
    "\035\206\037\224\040\222\041\227\042\210\051\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\007\232\011\221\013\233\022\u0161\026\211\027" +
    "\215\031\213\035\206\037\224\040\222\041\227\042\210" +
    "\051\207\001\001\000\032\007\232\011\221\013\233\026" +
    "\235\027\215\031\213\035\206\037\224\040\222\041\227" +
    "\042\210\051\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\377\001\001\000\006\007\175\017\u0167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\232\011\221\013\233" +
    "\022\u016b\026\211\027\215\031\213\035\206\037\224\040" +
    "\222\041\227\042\210\051\207\001\001\000\032\007\232" +
    "\011\221\013\233\026\235\027\215\031\213\035\206\037" +
    "\224\040\222\041\227\042\210\051\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\232\011\221\013\233\022\u0170\026\211\027\215\031\213" +
    "\035\206\037\224\040\222\041\227\042\210\051\207\001" +
    "\001\000\032\007\232\011\221\013\233\026\235\027\215" +
    "\031\213\035\206\037\224\040\222\041\227\042\210\051" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\024\006\022\007\037\011\030\013" +
    "\040\015\020\021\u017b\023\033\024\036\051\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoF1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoF1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoF1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/**Metodo al que se llama automáticamente ante algún error sintactico.*/
public void syntax_error(Symbol s){
System.out.println("No se pudo recuperar del error " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
// pantalla.errorLexLienzo(String.valueOf(s.value),String.valueOf(s.left),String.valueOf(s.right+1),"Sintactico"); 

}
/**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
System.out.println("No se pudo recuperar del error " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
// pantalla.errorLexLienzo(String.valueOf(s.value),String.valueOf(s.left),String.valueOf(s.right+1),"Sintactico"); 
}
/*Metodo que uso para verificar si el color es repetido*/


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoF1$actions {





  private final sintacticoF1 parser;

  /** Constructor */
  CUP$sintacticoF1$actions(sintacticoF1 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoF1$do_action(
    int                        CUP$sintacticoF1$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoF1$parser,
    java.util.Stack            CUP$sintacticoF1$stack,
    int                        CUP$sintacticoF1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoF1$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoF1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPA ::= id 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPA ::= verdadero 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPA ::= falso 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPA ::= corA OP corC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPA ::= parA OP parC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPA ::= llaveA OP llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPA ::= id parA PARV parC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPA ::= supeL punto id 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPA ::= supeL punto id parA PARV parC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-5)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPA ::= este punto id 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPA ::= este punto id parA parC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-4)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPA ::= este punto id parA PARV parC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-5)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPA ::= cadena 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPA ::= caracter 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPA ::= decimal 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPA ::= num 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPA ::= OPA decremento 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPA ::= OPA incremento 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPA ::= OPA pot OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPA ::= OPA div OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPA ::= OPA por OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPA ::= OPA resta OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPA ::= OPA suma OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(38/*OPA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPR ::= OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(37/*OPR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPR ::= OPR distinto OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(37/*OPR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPR ::= OPR comparacion OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(37/*OPR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPR ::= OPR menorIgual OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(37/*OPR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPR ::= OPR mayorIgual OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(37/*OPR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPR ::= OPR menor OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(37/*OPR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPR ::= OPR mayor OPA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(37/*OPR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AND ::= OPR 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(36/*AND*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AND ::= negacion OPR 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(36/*AND*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // XOR ::= AND 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(35/*XOR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // XOR ::= XOR yLogico AND 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(35/*XOR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OR ::= XOR 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(34/*OR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OR ::= OR xorLogico XOR 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(34/*OR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP ::= OR 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(33/*OP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP ::= OP oLogico OR 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(33/*OP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LOOP ::= ciclo llaveA dosPuntos CI dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(32/*LOOP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-5)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FOR ::= para parA id asignacion OP puntoComa OP puntoComa OP parC llaveA dosPuntos CCICLO dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(31/*FOR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-14)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // REPEAT_UNTIL ::= repite llaveA dosPuntos CCICLO dosPuntos llaveC hasta parA OP parC puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(30/*REPEAT_UNTIL*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-10)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DO_WHILE ::= hacer llaveA dosPuntos CCICLO dosPuntos llaveC mientras parA OP parC puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(29/*DO_WHILE*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-10)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CCICLO ::= continuar puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(28/*CCICLO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CCICLO ::= CI 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(28/*CCICLO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CCICLO ::= CCICLO continuar puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(28/*CCICLO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CCICLO ::= CCICLO CI 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(28/*CCICLO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // WHILE ::= mientras parA OP parC llaveA dosPuntos CCICLO dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(27/*WHILE*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-8)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CASOE ::= detener puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(26/*CASOE*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASO ::= pordefecto dosPuntos CU CASOE 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(25/*CASO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CASO ::= encaso OP dosPuntos CU CASOE 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(25/*CASO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-4)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CSW ::= CASO 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(24/*CSW*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CSW ::= CSW CASO 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(24/*CSW*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SWITCH ::= interruptor parA OP parC llaveA dosPuntos CSW dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(23/*SWITCH*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-8)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SINO ::= 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(22/*SINO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SINO ::= sino IF 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(22/*SINO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SINO ::= sino llaveA dosPuntos CU dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(22/*SINO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-5)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= si parA OP parC llaveA dosPuntos CU dosPuntos llaveC SINO 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(21/*IF*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-9)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CI ::= detener puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CI ::= id asignacion OP puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CI ::= retorno OP puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CI ::= ARREGLOS 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CI ::= VARIABLES 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CI ::= supeL punto id parA PARV parC puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-6)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CI ::= supeL parA PARV parC puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-4)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CI ::= vacioL imprimir parA OP parC puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-5)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CI ::= LOOP 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CI ::= FOR 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CI ::= REPEAT_UNTIL 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CI ::= DO_WHILE 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CI ::= WHILE 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CI ::= SWITCH 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CI ::= IF 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(20/*CI*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AR ::= path 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(19/*AR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AR ::= AR coma path 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(19/*AR*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IMP ::= importar AR puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(18/*IMP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CU ::= CI 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(16/*CU*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CU ::= CU CI 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(16/*CU*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TA ::= protegido 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(39/*TA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TA ::= privado 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(39/*TA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TA ::= publico 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(39/*TA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTANCIA ::= id id asignacion nulo 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(17/*INSTANCIA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTANCIA ::= id id asignacion nuevo id parA PARV parC puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(17/*INSTANCIA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-8)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTANCIA ::= id id asignacion nuevo id parA parC puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(17/*INSTANCIA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-7)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARV ::= OP 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(12/*PARV*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARV ::= PARV coma OP 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(12/*PARV*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARM ::= TDP id 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(13/*PARM*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARM ::= PARM coma TDP id 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(13/*PARM*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODOS ::= TA id parA PARM parC llaveA dosPuntos CU dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(11/*METODOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-9)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODOS ::= TA id parA parC llaveA dosPuntos CU dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(11/*METODOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-8)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODOS ::= TA TDP id parA PARM parC llaveA dosPuntos CU dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(11/*METODOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-10)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODOS ::= TA TDP id parA parC llaveA dosPuntos CU dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(11/*METODOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-9)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODOS ::= id parA PARM parC llaveA dosPuntos CU dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(11/*METODOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-8)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODOS ::= id parA parC llaveA dosPuntos CU dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(11/*METODOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-7)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODOS ::= TDP id parA PARM parC llaveA dosPuntos CU dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(11/*METODOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-9)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODOS ::= TDP id parA parC llaveA dosPuntos CU dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(11/*METODOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-8)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DIM ::= corA OP corC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(10/*DIM*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIM ::= DIM corA OP corC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(10/*DIM*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARREGLOS ::= TDP id DIM asignacion OP puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(9/*ARREGLOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-5)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARREGLOS ::= TDP id DIM puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(9/*ARREGLOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARREGLOS ::= TA TDP id DIM puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(9/*ARREGLOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-4)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARREGLOS ::= TA TDP id DIM asignacion OP puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(9/*ARREGLOS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-6)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LV ::= id 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(8/*LV*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LV ::= LV coma id 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(8/*LV*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIABLES ::= TA TDP LV puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(7/*VARIABLES*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIABLES ::= TA TDP LV asignacion OP puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(7/*VARIABLES*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-5)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIABLES ::= TDP LV asignacion OP puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(7/*VARIABLES*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-4)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARIABLES ::= TDP LV puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(7/*VARIABLES*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TDP ::= vacioL 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(5/*TDP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TDP ::= cadenaL 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(5/*TDP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TDP ::= boolL 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(5/*TDP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TDP ::= caracterL 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(5/*TDP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TDP ::= doubleL 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(5/*TDP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TDP ::= enteroL 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(5/*TDP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= sobreescritura METODOS 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= este punto id asignacion OP puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-5)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= id punto parA PARV parC puntoComa 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-5)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= METODOS 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ARREGLOS 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= INSTANCIA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= VARIABLES 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(4/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(3/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(3/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUP ::= SENTENCIAS 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(15/*CUP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUP ::= IMP SENTENCIAS 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(15/*CUP*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASES ::= clasesL id herencia id llaveA dosPuntos CUP dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(14/*CLASES*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-8)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASES ::= clasesL id llaveA dosPuntos CUP dosPuntos llaveC 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(14/*CLASES*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-6)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LENGUAJE_INTERNO ::= CLASES 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(2/*LENGUAJE_INTERNO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LENGUAJE_INTERNO ::= LENGUAJE_INTERNO CLASES 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(2/*LENGUAJE_INTERNO*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LENGUAJE_INTERNO 
            {
              Object RESULT = null;

              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          return CUP$sintacticoF1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoF1$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintacticoF1$stack.elementAt(CUP$sintacticoF1$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoF1$parser.done_parsing();
          return CUP$sintacticoF1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

